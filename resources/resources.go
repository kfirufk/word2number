package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resources_en_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcb\xb2\xd3\x30\x0c\x86\xf7\xe7\x29\x34\xc3\x9a\x92\x9e\x7b\xb3\xe5\x49\xdc\x5a\x21\x06\xd7\xce\xf8\xd2\x72\x78\x7a\x26\x6d\x18\xd0\xc5\x6d\x86\x2e\xa3\x4f\xbf\xa5\xbf\xb2\x8c\xa1\x7f\x00\xb0\x78\x70\x47\xe3\x73\x0f\x0f\x00\x00\x9f\xe1\x1c\x93\xed\x61\x8a\x2e\x94\xcb\x17\x80\x33\x9a\x1f\x3d\x0c\xc6\x67\x24\x8c\x8d\xde\x9b\x94\xef\x50\x58\x53\xd4\x99\x4f\xf0\x35\x56\x6f\x61\x8f\x60\xfe\xd4\x01\x79\xf2\xae\x14\x4c\x3d\xc4\x80\x60\x82\x85\xc1\x9d\x10\x0a\x86\x32\xe6\x0d\xfc\x93\x66\x7c\x8e\xf0\xbd\xe6\x72\x15\x18\x9c\xf7\x98\x96\x43\xcb\x39\xc2\x58\x83\x4d\x68\x17\x8d\xa1\x7c\x40\x19\x63\xcd\x26\xd8\x0d\x29\xd0\x04\x4b\xca\x2b\xa9\xce\xd5\x0d\x3e\x9a\xd2\x73\x12\x0c\x8c\xc6\x0f\x4b\x42\xa8\xc7\xfd\x5c\x6a\xb7\x79\x21\xe0\xf6\xcb\xa3\x4a\x1c\x62\x0d\x05\x53\xa6\xb2\xbf\x30\x45\x8e\x13\x20\x8e\xb7\xc3\x01\x59\x7c\x4b\xe2\xe5\xcc\xe5\x1f\x69\x7c\x4c\xc8\x15\x9e\x08\x31\xc4\x9a\x18\xf0\x4c\x01\x77\xe2\x0a\xd4\x91\xec\x7e\xb2\xf8\x2b\x8d\xe3\x09\x03\x23\xde\xe8\x1c\xb9\x6f\x63\x61\xc4\x3b\x21\x82\x13\x46\xec\x68\xa3\xe2\x88\x2d\x75\x12\xbd\x52\xc6\x96\xbb\x89\x5e\x34\xbb\xe5\x8e\xba\x54\x50\x2a\x49\x57\x35\x8a\x5b\x3b\x68\x90\xb0\x57\x83\x14\x8f\x35\x4c\x31\x5a\xa1\xa4\xd9\x1a\xb5\xe3\x66\x85\xf2\xc1\xa7\xaf\x93\x66\x71\xe6\xa9\x63\x56\x49\xe4\xb9\x13\x3e\x71\xe4\xa5\x13\x2e\x71\xe4\xb5\x53\x3c\xe2\xd0\x5b\x27\x1d\xe2\xcc\x7b\x27\xfd\xe1\xcc\x6e\x66\x8e\xd5\x17\x37\x79\x27\xf6\xc0\xb2\xb0\xc4\x88\x72\xbb\xae\x4b\x4c\x62\x94\x3b\x3a\xef\x5d\x94\x03\x7f\xf9\x11\x72\x7f\x8b\xe4\x70\x49\x77\xe8\x6b\xc2\x84\xe9\x80\x81\xed\xcf\xe5\xe3\x9d\x06\x27\x4c\xb0\x12\x9b\x7b\x14\x57\x91\x57\x3c\x61\x5a\xcb\xcd\x82\xeb\xe4\x74\xca\xba\x93\xb3\xe2\x7f\xbd\xd1\xcc\xdf\x69\x30\x7b\x8f\xda\xf3\x39\x27\xe7\xff\xce\xbe\x3c\x9b\xfa\xce\x5b\x99\x2c\xcf\x5e\x99\xbd\x4c\xb3\x72\x7c\xa7\x73\xad\x2e\xf9\xe0\x6b\x8a\x2d\x52\xd1\x54\x6f\x89\xaa\xd9\x64\x35\xd5\xc6\xa5\x6a\x09\x37\xf1\x86\x76\xeb\x1a\xde\xd0\x6f\xa7\xb4\xcf\x98\x73\x7e\x07\x00\x00\xff\xff\xec\x25\x79\x15\x18\x0a\x00\x00")

func resources_en_yml() ([]byte, error) {
	return bindata_read(
		_resources_en_yml,
		"resources/en.yml",
	)
}

var _resources_sv_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x4f\x72\x23\x2b\x0c\xc6\xf7\x39\x85\xaa\xde\xfa\xa5\x70\xfe\x4f\x6f\xe7\x24\xd8\xc8\x63\x1c\x1a\xb9\x40\xb4\x27\x07\xca\x15\xe6\x02\xbe\xd8\x54\x3b\x4e\x66\x90\x54\x76\x32\xbd\xec\xef\x27\x21\x7d\x08\xa8\xd3\x70\x05\x10\x70\x15\x47\x9f\xea\x00\x57\x00\x00\xff\xc3\x9e\x4a\x18\xe0\x99\xc6\xd1\x1f\xff\x00\xec\xd1\x3f\x0f\xb0\xf6\xa9\x62\xcf\x14\xca\x54\x2e\x40\xd8\x0a\x5d\x40\x02\xa5\xe4\xed\x3c\xff\xc1\x77\x6a\x29\xc0\x12\xc1\xbf\x97\x0a\x75\x97\x22\x33\x96\x01\x28\x23\xf8\x1c\x60\x1d\x27\x04\xc6\xcc\x9b\x7a\x0d\x7f\x85\xf9\x54\x09\xb6\xad\xf2\x5b\x82\x75\x4c\x09\xcb\x69\x55\xde\x13\x6c\x5a\x0e\x05\xc3\x29\xc7\x9a\x5f\x80\x37\xd4\xaa\xcf\xe1\xba\xab\x90\x56\x9b\xae\x3c\x2e\x0d\xe7\x75\x56\xd4\x32\x63\xa9\x43\x47\x67\x4a\xe9\x84\xe7\x36\x2e\xe7\x42\x5d\xef\x09\xb3\xd0\x17\xbd\x9e\xcf\xca\x3c\x1d\x5e\x05\x70\xd3\x03\x05\x85\x7e\xdb\xe9\xeb\x97\xe2\x05\x70\xd7\x03\x38\x0a\xfd\xbe\xd3\x2b\xfe\x14\xfa\x43\xaf\x6f\x9b\xd0\x1f\x3b\xfd\xf0\xca\x2c\x2b\x78\xea\x3d\x8c\x24\xf4\x6f\x7d\x8b\x4a\x5f\x08\x8f\xd3\x24\x57\x58\x08\x1b\x29\x4d\x92\x50\x3e\x32\x93\xda\x0c\x61\xe6\x96\x8a\x01\x29\x43\x0d\x46\x99\x6a\x30\xca\x58\xab\xa2\xde\x5d\x6f\xd5\x23\xed\xb5\xd2\x08\x8b\xb7\xed\x87\x34\xf9\xc6\x69\x83\xd4\x4e\xdc\x3a\x39\x6d\x9a\xb9\x73\xca\x1f\xc5\xdc\x3b\xe5\x8f\x62\x1e\x9c\xf6\x47\x41\x8f\x4e\x4d\x9f\x62\x9e\x9c\x32\x48\x8f\xe0\xcc\x8c\x2d\x71\xdc\xa5\xa8\x8e\xfd\xf1\x32\x51\x33\xe7\x84\x63\xad\xea\xd3\xed\x04\x34\xc6\xb4\xd5\xbb\xe3\x8e\x9f\x02\x7d\x09\x36\x29\xe1\xe5\x99\xac\x1f\xf8\x0e\xcb\x0a\x33\xf7\x9d\xed\x0a\xcd\x3f\x2f\xb4\xb6\x2b\x34\xce\x17\xac\xdd\x5d\x88\x53\x0c\xca\xb3\xc3\x2f\x75\x55\xbd\xa7\xfd\xe3\xb4\x5f\x26\xb4\xde\x8d\x39\xd8\xe8\xe7\x93\xd1\x67\x3a\xfa\x5c\x70\xfd\xe7\x68\x8e\x94\x03\xca\x37\x62\xf1\xc5\xf0\x8f\x27\xf3\xcb\x09\xde\x26\xd5\xaa\xc0\xd9\x9c\xb1\x94\x31\xd6\x66\x42\x9b\xb3\x12\x5a\x67\x80\xd1\x4e\x7a\x86\x36\x53\xcf\xfc\xef\x00\x00\x00\xff\xff\xc7\x24\x3e\x01\xf0\x08\x00\x00")

func resources_sv_yml() ([]byte, error) {
	return bindata_read(
		_resources_sv_yml,
		"resources/sv.yml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resources/en.yml": resources_en_yml,
	"resources/sv.yml": resources_sv_yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resources": &_bintree_t{nil, map[string]*_bintree_t{
		"en.yml": &_bintree_t{resources_en_yml, map[string]*_bintree_t{}},
		"sv.yml": &_bintree_t{resources_sv_yml, map[string]*_bintree_t{}},
	}},
}}
