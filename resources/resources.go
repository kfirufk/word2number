package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resources_en_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcf\x92\xda\x30\x0c\xc6\xef\xfb\x14\x9a\xe9\xb9\x6c\x02\xec\xb2\xe4\xda\x27\x31\x58\x69\xdc\x1a\x3b\xe3\x3f\x50\xfa\xf4\x9d\x40\x3a\xad\x25\x19\x32\xcb\x31\xfa\xe9\xb3\xf4\x21\xcb\xe8\xba\x17\x00\x8d\x47\x73\x52\x36\x76\xf0\x02\x00\xf0\x15\x2e\x3e\xe8\x0e\x46\x6f\x5c\xba\x7d\x01\xb8\xa0\xfa\xd9\x41\xaf\x6c\xc4\x82\xd1\xde\x5a\x15\xe2\x13\x0a\x73\xf0\x32\xf3\x05\xbe\xf9\x6c\x35\x1c\x10\xd4\xdf\x3a\x20\x8e\xd6\xa4\x84\xa1\x03\xef\x10\x94\xd3\xd0\x9b\x33\x42\x42\x97\x86\xb8\x82\xff\xd2\x94\x8d\x1e\x7e\xe4\x98\xee\x02\xbd\xb1\x16\xc3\x7c\x68\xba\x78\x18\xb2\xd3\x01\xf5\xac\xd1\xa7\x2b\xa4\xc1\xe7\xa8\x9c\x5e\x15\x05\x2a\xa7\x8b\xf2\x52\xc8\x53\x75\xbd\xf5\x2a\x75\x94\x04\x05\x83\xb2\xfd\x9c\xe0\xf2\xe9\x30\x95\xda\xac\xde\x0a\xb0\x7d\x5d\x3f\x21\x36\xaf\x5b\x46\xec\xa8\x08\x47\xd6\x13\x72\xf4\xd9\x25\x0c\xb1\x2c\xee\x37\x06\x4f\xf9\x02\xf0\xc3\xe3\xb0\x43\x12\x6f\x8b\x78\xba\x50\xf9\x75\x19\x1f\x02\x52\x85\x4d\x41\xf4\x3e\x07\x02\x6c\x4b\xc0\x9c\xa9\x42\x69\x49\x34\xbf\x48\xfc\xbd\x8c\xe3\x19\x1d\x21\x76\xe5\x34\x9a\xef\x43\x22\xc4\x47\x41\x38\xc3\x8c\xd8\x97\x8d\xb2\x23\xda\xd2\x49\xb4\x42\x19\x2d\x75\x13\x2d\x6b\xb6\xa5\x8e\x9a\x90\x90\x2b\x71\x57\x25\x8a\x5a\xdb\x4b\x10\xb3\x57\x82\x04\x8f\x25\x4c\x30\x5a\xa0\xb8\xd9\x12\xb5\xa7\x66\xb9\x74\xa5\xd3\xd7\x70\xb3\x28\xb3\x69\x88\x55\x1c\xd9\x36\xcc\x27\x8a\xbc\x35\xcc\x25\x8a\xbc\x37\x82\x47\x14\xda\x35\xdc\x21\xca\x7c\x34\xdc\x1f\xca\xec\x27\xe6\x94\x6d\x32\xa3\x35\x6c\x0f\xcc\x6b\x8f\x8d\x28\xb5\xeb\xbe\x0a\x39\x56\x72\x27\x63\xad\xf1\x7c\xe0\x6f\xbf\x82\x3c\x3c\x22\x29\x9c\xc2\x13\xfa\x9e\x30\x62\x38\xa2\x23\x5b\x78\xfe\xf8\xa4\xc1\x11\x03\x2c\xc4\xa6\x1e\xd9\x55\xa4\x15\x8f\x18\x96\x72\x93\xe0\x32\x39\x99\xd2\xe6\x6c\x34\xfb\x5f\x1f\x34\xf3\x6f\x1a\xd4\xc1\xa2\xf4\x08\x4f\xc9\xf1\xd3\xd9\xb7\xc7\x57\xde\x79\x0b\x93\xf9\xd9\x0b\xb3\xe7\x69\x16\x8e\x6f\x64\xae\xd6\x25\x1d\x7c\x49\xb1\x46\x0a\x9a\xe2\x2d\x11\x35\xab\xac\xa4\x5a\xb9\x54\x35\xe1\x2a\x5e\xd1\xae\x5d\xc3\x07\xfa\xf5\x94\xfa\x19\x53\xce\x9f\x00\x00\x00\xff\xff\x55\x79\x60\x85\x5e\x0a\x00\x00")

func resources_en_yml() ([]byte, error) {
	return bindata_read(
		_resources_en_yml,
		"resources/en.yml",
	)
}

var _resources_sv_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x4f\x72\x23\x2b\x0c\xc6\xf7\x39\x85\xaa\xde\xfa\xa5\x70\xfe\x4f\x6f\xe7\x24\xd8\xc8\x63\x1c\x1a\xb9\x40\xb4\x27\x07\xca\x15\xe6\x02\xbe\xd8\x54\x3b\x4e\x66\x90\x54\x76\x32\xbd\xec\xef\x27\x21\x7d\x08\xa8\xd3\x70\x05\x10\x70\x15\x47\x9f\xea\x00\x57\x00\x00\xff\xc3\x9e\x4a\x18\xe0\x99\xc6\xd1\x1f\xff\x00\xec\xd1\x3f\x0f\xb0\xf6\xa9\x62\xcf\x14\xca\x54\x2e\x40\xd8\x0a\x5d\x40\x02\xa5\xe4\xed\x3c\xff\xc1\x77\x6a\x29\xc0\x12\xc1\xbf\x97\x0a\x75\x97\x22\x33\x96\x01\x28\x23\xf8\x1c\x60\x1d\x27\x04\xc6\xcc\x9b\x7a\x0d\x7f\x85\xf9\x54\x09\xb6\xad\xf2\x5b\x82\x75\x4c\x09\xcb\x69\x55\xde\x13\x6c\x5a\x0e\x05\xc3\x29\xc7\x9a\x5f\x80\x37\xd4\xaa\xcf\xe1\xba\xab\x90\x56\x9b\xae\x3c\x2e\x0d\xe7\x75\x56\xd4\x32\x63\xa9\x43\x47\x67\x4a\xe9\x84\xe7\x36\x2e\xe7\x42\x5d\xef\x09\xb3\xd0\x17\xbd\x9e\xcf\xca\x3c\x1d\x5e\x05\x70\xd3\x03\x05\x85\x7e\xdb\xe9\xeb\x97\xe2\x05\x70\xd7\x03\x38\x0a\xfd\xbe\xd3\x2b\xfe\x14\xfa\x43\xaf\x6f\x9b\xd0\x1f\x3b\xfd\xf0\xca\x2c\x2b\x78\xea\x3d\x8c\x24\xf4\x6f\x7d\x8b\x4a\x5f\x08\x8f\xd3\x24\x57\x58\x08\x1b\x29\x4d\x92\x50\x3e\x32\x93\xda\x0c\x61\xe6\x96\x8a\x01\x29\x43\x0d\x46\x99\x6a\x30\xca\x58\xab\xa2\xde\x5d\x6f\xd5\x23\xed\xb5\xd2\x08\x8b\xb7\xed\x87\x34\xf9\xc6\x69\x83\xd4\x4e\xdc\x3a\x39\x6d\x9a\xb9\x73\xca\x1f\xc5\xdc\x3b\xe5\x8f\x62\x1e\x9c\xf6\x47\x41\x8f\x4e\x4d\x9f\x62\x9e\x9c\x32\x48\x8f\xe0\xcc\x8c\x2d\x71\xdc\xa5\xa8\x8e\xfd\xf1\x32\x51\x33\xe7\x84\x63\xad\xea\xd3\xed\x04\x34\xc6\xb4\xd5\xbb\xe3\x8e\x9f\x02\x7d\x09\x36\x29\xe1\xe5\x99\xac\x1f\xf8\x0e\xcb\x0a\x33\xf7\x9d\xed\x0a\xcd\x3f\x2f\xb4\xb6\x2b\x34\xce\x17\xac\xdd\x5d\x88\x53\x0c\xca\xb3\xc3\x2f\x75\x55\xbd\xa7\xfd\xe3\xb4\x5f\x26\xb4\xde\x8d\x39\xd8\xe8\xe7\x93\xd1\x67\x3a\xfa\x5c\x70\xfd\xe7\x68\x8e\x94\x03\xca\x37\x62\xf1\xc5\xf0\x8f\x27\xf3\xcb\x09\xde\x26\xd5\xaa\xc0\xd9\x9c\xb1\x94\x31\xd6\x66\x42\x9b\xb3\x12\x5a\x67\x80\xd1\x4e\x7a\x86\x36\x53\xcf\xfc\xef\x00\x00\x00\xff\xff\xc7\x24\x3e\x01\xf0\x08\x00\x00")

func resources_sv_yml() ([]byte, error) {
	return bindata_read(
		_resources_sv_yml,
		"resources/sv.yml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resources/en.yml": resources_en_yml,
	"resources/sv.yml": resources_sv_yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resources": &_bintree_t{nil, map[string]*_bintree_t{
		"en.yml": &_bintree_t{resources_en_yml, map[string]*_bintree_t{}},
		"sv.yml": &_bintree_t{resources_sv_yml, map[string]*_bintree_t{}},
	}},
}}
